package com.tr.android.visualvoiceaccessoryprovider.service;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.security.cert.CertificateException;import java.security.cert.CertificateFactory;import java.util.HashMap;import javax.security.cert.X509Certificate;import android.content.Context;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.Signature;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Binder;import android.os.IBinder;import android.util.Log;import android.widget.Toast;import com.samsung.android.sdk.SsdkUnsupportedException;import com.samsung.android.sdk.accessory.SA;import com.samsung.android.sdk.accessory.SAAgent;import com.samsung.android.sdk.accessory.SAAuthenticationToken;import com.samsung.android.sdk.accessory.SAPeerAgent;import com.samsung.android.sdk.accessory.SASocket;public class VisualVoiceAccessoryProviderService extends SAAgent {	public static final String TAG = "VisualVoiceAccessoryProviderService";	public Boolean isAuthentication = false;	public Context mContext = null;	public static final int SERVICE_CONNECTION_RESULT_OK = 0;	public static final int VISUALVOICEACCESSORY_CHANNEL_ID = 198;	HashMap<Integer, VisualVoiceAccessoryProviderConnection> mConnectionsMap = null;	//private VisualVoiceAccessoryProviderConnection mConnection = null;	private final IBinder mBinder = new LocalBinder();	public class LocalBinder extends Binder {		public VisualVoiceAccessoryProviderService getService() {			return VisualVoiceAccessoryProviderService.this;		}	}	public VisualVoiceAccessoryProviderService() {		super(TAG, VisualVoiceAccessoryProviderConnection.class);	}	/*    public class VisualVoiceAccessoryProviderConnection extends SASocket {        public static final String TAG = "VisualVoiceAccessoryProviderConnection";        int mConnectionId;        public VisualVoiceAccessoryProviderConnection() {            super(VisualVoiceAccessoryProviderConnection.class.getName());        }        @Override        protected void onServiceConnectionLost(int errorCode) {            Log.e(TAG, "onServiceConectionLost  for peer = " + mConnectionId + "error code =" + errorCode);            mConnection = null;        }        @Override        public void onReceive(int channelId, byte[] data) {            try {                //onDataAvailableonChannel(mConnectionId, channelId, new String(data, "UTF-8"));                if(VisualVoiceActivity.mReceiveVoiceQ == null)    				return;    			String nextResultsVoice = VisualVoiceActivity.mReceiveVoiceQ.poll();    			if(nextResultsVoice == null)    			{    				nextResultsVoice = "null";    			}    			final String message = nextResultsVoice;//strToUpdateUI.concat(timeStr);    			final VisualVoiceAccessoryProviderConnection uHandler = mConnectionsMap.get(Integer    					.parseInt(String.valueOf(mConnectionId)));    			if(uHandler == null){    				//Log.e(TAG,"Error, can not get VisualVoiceAccessoryProviderConnection handler");    				return;    			}    			new Thread(new Runnable() {    				public void run() {    					try {    						uHandler.send(VISUALVOICEACCESSORY_CHANNEL_ID, message.getBytes());    					} catch (IOException e) {    						//e.printStackTrace();    					}    				}    			}).start();            } catch (UnsupportedEncodingException e) {                e.printStackTrace();            }        }        @Override        public void onError(int channelId, String errorMessage, int errorCode) {        }    }	 */	public class VisualVoiceAccessoryProviderConnection extends SASocket {		private int mConnectionId;		public VisualVoiceAccessoryProviderConnection() {			super(VisualVoiceAccessoryProviderConnection.class.getName());		}		@Override		public void onError(int channelId, String errorString, int error) {			//Log.e(TAG, "Connection is not alive ERROR: " + errorString + "  "			//		+ error);		}		@Override		public void onReceive(int channelId, byte[] data) {			boolean requestToStartVisualVoiceActivity = false;			//Log.d(TAG, "onReceive");			//Time time = new Time();			//time.set(System.currentTimeMillis());			//String gear2VisualVoiceIsCalling = new String(data);			//if(gear2VisualVoiceIsCalling.equals("Gear2VisualVoiceIsCalling") == false)			//{			//	return;			//}			//try			//{			//	if(gear2VisualVoiceIsCalling.equals("Gear2VisualVoiceIsCalling") && (VisualVoiceActivity.isUp == false))			//	{			//Intent dialogIntent = new Intent(getBaseContext(), VisualVoiceActivity.class);			//dialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);			//getApplication().startActivity(dialogIntent);			//if(!VisualVoiceActivity.isUp)			//{			//mContext.startActivity(new Intent().setClass(mContext, VisualVoiceActivity.class)			//		.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));			//Intent visualVoiceIntent = new Intent(getBaseContext(), VisualVoiceActivity.class);			//visualVoiceIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);			//getApplication().startActivity(visualVoiceIntent);			//}			//		return;			//	}			//}catch (Exception e1) { }			if(VisualVoiceActivity.mReceiveVoiceQ == null)				return;			String nextResultsVoice = VisualVoiceActivity.mReceiveVoiceQ.poll();			if(nextResultsVoice == null)			{				nextResultsVoice = "null";			}			try {				String gear2VisualVoiceIsCalling = new String(data, "UTF-8");				if(gear2VisualVoiceIsCalling.equals("FirstTimeLoading"))				{					//nextResultsVoice = "FirstTimeLoading1";					if(!VisualVoiceActivity.isUp)					{						requestToStartVisualVoiceActivity = true;					}				}			} catch (UnsupportedEncodingException e1) {				//e1.printStackTrace();			}			final String message = nextResultsVoice;//strToUpdateUI.concat(timeStr);			final VisualVoiceAccessoryProviderConnection uHandler = mConnectionsMap.get(Integer					.parseInt(String.valueOf(mConnectionId)));			if(uHandler == null){				//Log.e(TAG,"Error, can not get VisualVoiceAccessoryProviderConnection handler");				return;			}			new Thread(new Runnable() {				public void run() {					try {						uHandler.send(VISUALVOICEACCESSORY_CHANNEL_ID, message.getBytes());					} catch (IOException e) {						//e.printStackTrace();					}				}			}).start();						if(requestToStartVisualVoiceActivity)			{				new Thread(new Runnable() {					public void run() {						try {							// http://stackoverflow.com/questions/10641144/difference-between-getcontext-getapplicationcontext-getbasecontext-and							//Intent visualVoiceIntent = new Intent(getBaseContext(), VisualVoiceActivity.class);							//visualVoiceIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);							//getApplication().startActivity(visualVoiceIntent);							getApplicationContext().startActivity(new Intent().setClass(getApplicationContext(), VisualVoiceActivity.class)			                         .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));						} catch (Exception e) {							//e.printStackTrace();						}					}				}).start();			}		}		@Override		protected void onServiceConnectionLost(int errorCode) {			//Log.e(TAG, "onServiceConectionLost  for peer = " + mConnectionId			//		+ "error code =" + errorCode);			if (mConnectionsMap != null) {				mConnectionsMap.remove(mConnectionId);			}		}	}	@Override	public void onCreate() {		super.onCreate();		//Log.i(TAG, "onCreate of smart view Provider Service");		SA mAccessory = new SA();		try {			mAccessory.initialize(this);		} catch (SsdkUnsupportedException e) {			// Error Handling		} catch (Exception e1) {			//Log.e(TAG, "Cannot initialize Accessory package.");			stopSelf();		}	}	 	@Override	public void onDestroy()	{		super.onDestroy();	}	@Override	protected void onFindPeerAgentResponse(SAPeerAgent arg0, int arg1) {		//Log.d(TAG, "onFindPeerAgentResponse  arg1 =" + arg1);	}	/*	@Override    protected void onServiceConnectionResponse(SASocket uSocket, int error) {        if (error == 0) {        	VisualVoiceAccessoryProviderConnection localConnection = (VisualVoiceAccessoryProviderConnection) uSocket;            if (uSocket != null) {                mConnection = localConnection;                //Toast.makeText(getBaseContext(), "Connection established for FT", Toast.LENGTH_SHORT).show();            }        }    }*/	@Override	protected void onServiceConnectionResponse(SASocket thisConnection,	int result) 	{		if (result == CONNECTION_SUCCESS) {			if (thisConnection != null) {				VisualVoiceAccessoryProviderConnection myConnection = (VisualVoiceAccessoryProviderConnection) thisConnection;				if (mConnectionsMap == null) {					mConnectionsMap = new HashMap<Integer, VisualVoiceAccessoryProviderConnection>();				}				myConnection.mConnectionId = (int) (System.currentTimeMillis() & 255);				//Log.d(TAG, "onServiceConnection connectionID = "				//		+ myConnection.mConnectionId);				mConnectionsMap.put(myConnection.mConnectionId, myConnection);				//Log.e(TAG, "Connection Success");			} else {				//Log.e(TAG, "SASocket object is null");			}		} else if (result == CONNECTION_ALREADY_EXIST) {			//Log.e(TAG, "onServiceConnectionResponse, CONNECTION_ALREADY_EXIST");		} else {			//Log.e(TAG, "onServiceConnectionResponse result error =" + result);		}	}	@Override 	protected void onServiceConnectionRequested(SAPeerAgent peerAgent) {		/*		 * The authenticatePeerAgent(peerAgent) API may not be working properly 		 * depending on the firmware version of accessory device. 		 * Recommend to upgrade accessory device firmware if possible.		 */  		//    	if(authCount%2 == 1)		//    		isAuthentication = false;		//    	else		//    		isAuthentication = true; 		//    	authCount++;		isAuthentication = false;		if(isAuthentication) {			//Toast.makeText(getBaseContext(), "Authentication On!", Toast.LENGTH_SHORT).show();			//Log.e(TAG, "Start authenticatePeerAgent");			authenticatePeerAgent(peerAgent);		}		else {			//Toast.makeText(getBaseContext(), "Authentication Off!", Toast.LENGTH_SHORT).show();			//Log.e(TAG, "acceptServiceConnectionRequest");			acceptServiceConnectionRequest(peerAgent);		}    			} 	protected void onAuthenticationResponse(SAPeerAgent uPeerAgent,			SAAuthenticationToken authToken, int error) {		if (authToken.getAuthenticationType() == SAAuthenticationToken.AUTHENTICATION_TYPE_CERTIFICATE_X509) {			mContext = getApplicationContext();			byte[] myAppKey = getApplicationCertificate(mContext);			if (authToken.getKey() != null) {				boolean matched = true;				if(authToken.getKey().length != myAppKey.length){					matched = false;				}else{					for(int i=0; i<authToken.getKey().length; i++){						if(authToken.getKey()[i]!=myAppKey[i]){							matched = false;						}					}				}								if (matched) {					acceptServiceConnectionRequest(uPeerAgent);					//Log.e(TAG, "Auth-certification matched");				} else				{					//Log.e(TAG, "Auth-certification not matched");						}			}		} else if (authToken.getAuthenticationType() == SAAuthenticationToken.AUTHENTICATION_TYPE_NONE) 		{			//Log.e(TAG, "onAuthenticationResponse : CERT_TYPE(NONE)");		}	}	private static byte[] getApplicationCertificate(Context context) {		if(context == null) {			//Log.e(TAG, "getApplicationCertificate ERROR, context input null");			return null;		}		Signature[] sigs;		byte[] certificat = null;		String packageName = context.getPackageName();		if (context != null) {			try {				PackageInfo pkgInfo = null;				pkgInfo = context.getPackageManager().getPackageInfo(						packageName, PackageManager.GET_SIGNATURES);				if (pkgInfo == null) {					//Log.e(TAG, "PackageInfo was null!");					return null;				}				sigs = pkgInfo.signatures;				if (sigs == null) {					//Log.e(TAG, "Signature obtained was null!");				} else {					CertificateFactory cf = CertificateFactory							.getInstance("X.509");					ByteArrayInputStream stream = new ByteArrayInputStream(							sigs[0].toByteArray());					X509Certificate cert;					cert = X509Certificate.getInstance(stream);					certificat = cert.getPublicKey().getEncoded();				}			} catch (NameNotFoundException e) {				//e.printStackTrace();			} catch (CertificateException e) {				//e.printStackTrace();			} catch (javax.security.cert.CertificateException e) {				//e.printStackTrace();			}		}		return certificat;	}	@Override	public IBinder onBind(Intent arg0) {		return mBinder;	}}